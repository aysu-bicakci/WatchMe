// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WatchMe.Data;

#nullable disable

namespace WatchMe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241231160828_AddResetTokenToUser")]
    partial class AddResetTokenToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WatchMe.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WatchMe.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<double?>("Popularity")
                        .HasColumnType("double precision");

                    b.Property<string>("PosterPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MovieId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("WatchMe.Models.MovieComment", b =>
                {
                    b.Property<int>("MovieCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("MovieCommentId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieComments");
                });

            modelBuilder.Entity("WatchMe.Models.MovieDislike", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieDislikeId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieDislikes");
                });

            modelBuilder.Entity("WatchMe.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("WatchMe.Models.MovieLike", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieLikeId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieLikes");
                });

            modelBuilder.Entity("WatchMe.Models.MovieWatchList", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieWatchListId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieWatchLists");
                });

            modelBuilder.Entity("WatchMe.Models.TVShow", b =>
                {
                    b.Property<int>("TVShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TVShowId"));

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<double?>("Popularity")
                        .HasColumnType("double precision");

                    b.Property<string>("PosterPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("TVShowId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("TVShows");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowComment", b =>
                {
                    b.Property<int>("TVShowCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TVShowCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TVShowId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TVShowCommentId");

                    b.HasIndex("TVShowId");

                    b.HasIndex("UserId");

                    b.ToTable("TVShowComments");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowDislike", b =>
                {
                    b.Property<int>("TVShowId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TVShowDislikeId")
                        .HasColumnType("integer");

                    b.HasKey("TVShowId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TVShowDislikes");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowGenre", b =>
                {
                    b.Property<int>("TVShowId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("TVShowId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TVShowGenres");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowLike", b =>
                {
                    b.Property<int>("TVShowId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TVShowLikeId")
                        .HasColumnType("integer");

                    b.HasKey("TVShowId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TVShowLikes");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowWatchList", b =>
                {
                    b.Property<int>("TVShowId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TVShowWatchListId")
                        .HasColumnType("integer");

                    b.HasKey("TVShowId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TVShowWatchLists");
                });

            modelBuilder.Entity("WatchMe.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WatchMe.Models.MovieComment", b =>
                {
                    b.HasOne("WatchMe.Models.Movie", "Movie")
                        .WithMany("MovieComments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("MovieComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.MovieDislike", b =>
                {
                    b.HasOne("WatchMe.Models.Movie", "Movie")
                        .WithMany("MovieDislikes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("MovieDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.MovieGenre", b =>
                {
                    b.HasOne("WatchMe.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("WatchMe.Models.MovieLike", b =>
                {
                    b.HasOne("WatchMe.Models.Movie", "Movie")
                        .WithMany("MovieLikes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("MovieLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.MovieWatchList", b =>
                {
                    b.HasOne("WatchMe.Models.Movie", "Movie")
                        .WithMany("MovieWatchLists")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("MovieWatchLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowComment", b =>
                {
                    b.HasOne("WatchMe.Models.TVShow", "TVShow")
                        .WithMany("TVShowComments")
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("TVShowComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TVShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowDislike", b =>
                {
                    b.HasOne("WatchMe.Models.TVShow", "TVShow")
                        .WithMany("TVShowDislikes")
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("TVShowDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TVShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowGenre", b =>
                {
                    b.HasOne("WatchMe.Models.Genre", "Genre")
                        .WithMany("TVShowGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.TVShow", "TVShow")
                        .WithMany("TVShowGenres")
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("TVShow");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowLike", b =>
                {
                    b.HasOne("WatchMe.Models.TVShow", "TVShow")
                        .WithMany("TVShowLikes")
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("TVShowLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TVShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.TVShowWatchList", b =>
                {
                    b.HasOne("WatchMe.Models.TVShow", "TVShow")
                        .WithMany("TVShowWatchLists")
                        .HasForeignKey("TVShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchMe.Models.User", "User")
                        .WithMany("TVShowWatchLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TVShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchMe.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TVShowGenres");
                });

            modelBuilder.Entity("WatchMe.Models.Movie", b =>
                {
                    b.Navigation("MovieComments");

                    b.Navigation("MovieDislikes");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieLikes");

                    b.Navigation("MovieWatchLists");
                });

            modelBuilder.Entity("WatchMe.Models.TVShow", b =>
                {
                    b.Navigation("TVShowComments");

                    b.Navigation("TVShowDislikes");

                    b.Navigation("TVShowGenres");

                    b.Navigation("TVShowLikes");

                    b.Navigation("TVShowWatchLists");
                });

            modelBuilder.Entity("WatchMe.Models.User", b =>
                {
                    b.Navigation("MovieComments");

                    b.Navigation("MovieDislikes");

                    b.Navigation("MovieLikes");

                    b.Navigation("MovieWatchLists");

                    b.Navigation("TVShowComments");

                    b.Navigation("TVShowDislikes");

                    b.Navigation("TVShowLikes");

                    b.Navigation("TVShowWatchLists");
                });
#pragma warning restore 612, 618
        }
    }
}
